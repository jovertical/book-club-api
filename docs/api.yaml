openapi: 3.1.0
info:
  title: book-club-api
  description: The Swagger API documentation for the book-club-api project.
  version: '0.1.0'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Bad Request
              message:
                type: string
                example: Invalid request
              statusCode:
                type: number
                example: 400
    UnauthorizedError:
      description: Unauthorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Missing Authorization HTTP header.
              statusCode:
                type: number
                example: 401
    ForbiddenError:
      description: Forbidden request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: invalid_grant
              message:
                type: string
                example: Wrong email or password.
              statusCode:
                type: number
                example: 403
  parameters:
    CollectionParams:
      page:
        name: page
        in: query
        description: The page number to fetch
        required: false
        schema:
          type: integer
          default: 1
          minimum: 1
        example: 1
      limit:
        name: limit
        in: query
        description: The number of items per page
        required: false
        schema:
          type: integer
          default: 10
          minimum: 1
        example: 10
      sort_by:
        name: sort_by
        in: query
        description: Field to sort by
        required: false
        schema:
          type: string
        example: title
      sort_order:
        name: sort_order
        in: query
        description: Order of sorting (asc for ascending, desc for descending)
        required: false
        schema:
          type: string
          enum:
            - asc
            - desc
        example: asc

  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        bio:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        info:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        author:
          type: object
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Genre'
    Genre:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

security:
  - bearerAuth: []

paths:
  /:
    get:
      summary: Health check
      description: Health check endpoint
      tags:
        - Health Check
      responses:
        200:
          description: Succesful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to the Book Club API
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /auth/login:
    post:
      summary: User login
      description: Login to the system
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: password
      responses:
        201:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: auth-bearer-token
                      expires_in:
                        type: number
                        example: 3600
                      token_type:
                        type: string
                        example: Bearer
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
  /books:
    get:
      summary: List all books
      description: Fetch a list of books from the system
      tags:
        - Books
      parameters:
        - $ref: '#/components/parameters/CollectionParams/page'
        - $ref: '#/components/parameters/CollectionParams/limit'
        - $ref: '#/components/parameters/CollectionParams/sort_by'
        - $ref: '#/components/parameters/CollectionParams/sort_order'
      responses:
        200:
          description: A collection of books is fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Book'
                  meta:
                    type: object
                    properties:
                      page:
                        type: number
                      limit:
                        type: number
                      total:
                        type: number
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
